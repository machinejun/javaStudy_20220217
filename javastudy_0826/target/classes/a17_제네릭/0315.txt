17. 제너릭
: 데이터 타입을 일반화 한다. 
: 클래스나 메서드에서 사용할 내부 데이터 타입을 컴파일시 미리 지장하는 방식

---------------------------------------------------------------------------

장점 
1. 클래스나 메서드 내부에서 사용되는 객체의 타입 안전성을 높일 수 있다.
2. 반환값에 대한 타입 변환 및 타입 검사에 들어가는 노력을 줄일 수 있다.

---------------------------------------------------------------------------

17.1 컬렉션 프레임 워크
: 다수의 데이터를 효과적으로 처리하기 위한 표준화된 방법을 제공하는 클래스의 집합
= 데이터를 저장하는 자료 구조 & 데이터를 처리하는 알고리즘을 구조화하여 클래스로 만들어 놓은것



컬렉션 프레임워크는 자바의 인터페이스를 이용하여 구현

---------------------------------------------------------------------------

컬렉션 프레임워크★★★★★★★★★★

1. list 
: 순서가 있는 데이터 집합, 데이터 중복 허용
> 순서가 있는 캐비넛(지정된 위치가 있다)

2. set 
: 순서가 없는 데이터 집합, 데이터 중복 X
> 트럼프카드(섞일수는 있지만 , 카드는 유일하게 한장 있어야한다.)

3. map : 키와 한쌍으로 이루어지는 데이터 집합, 순서 X & 키는 중복 X, 값 중복 O
> 키와 값이 한쌍으로 이루어짐 -> 맛집(값), 가게(키값)

list, set < 컬렉션 인터페이스 상속, 컬랙션에 들어있는 메소드, 필드 내용을 상속
map < 별도로 존재, 컬랙션과 다를수도 있다.

컬렉션 인터페이스:


boolean add(E("자료형") e("매개변수"))


ArrayList<자료형> 변수명 = new ArrayList<자료형>();

변수명.add(값); : 값 집어넣기
변수명.get(i) : 인덱스값 집어넣어서 값 뽑기
.remove(i) : 값 제거
 


자료구조: 데이터를 (저장,쓰기,읽기)하는 방법
알고리즘: 데이터를 처리하는 방식, 코드를 의미 = 공식 설계
스레드: 동시에 처리할수 있는 능력
클럭: 데이터를 처리하는 주파수(속도)

설명: http://www.tcpschool.com/java/java_collectionFramework_concept